From 56b149e6403917c5dcf4bcca84275420991b2fc0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Juli=C3=A0=20Mestieri?= <juli.quiron@gmail.com>
Date: Thu, 18 Apr 2019 09:49:23 +0200
Subject: [PATCH] Added WP-CLI command to synchronize Optimus WebP image
 optimization status. (#279)

Upstream PR: https://github.com/keycdn/wp-optimus/pull/7
---
 inc/optimus_cli.class.php        |  35 ++++++
 inc/optimus_management.class.php |  49 ++++++--
 inc/optimus_request.class.php    | 200 ++++++++++++++++++-------------
 3 files changed, 194 insertions(+), 90 deletions(-)

diff --git a/inc/optimus_cli.class.php b/inc/optimus_cli.class.php
index 433c4b9fe..a9927998f 100644
--- a/inc/optimus_cli.class.php
+++ b/inc/optimus_cli.class.php
@@ -51,6 +51,36 @@ class Optimus_CLI extends WP_CLI_Command
         $formatter->display_items( $assets );
     }
 
+    /**
+     * webp sync command.
+     *
+     * Checks if all the registered files really have the optimized version.
+     * Note: only works with convert to webp is enabled.
+     */
+    public static function webpSync () {
+      $options = Optimus::get_options();
+      if ($options['webp_convert'] == 0) {
+        WP_CLI::error('webp sync command only syncs webp missing images. Looks like you don\'t have this setting enabled.', TRUE);
+      }
+
+      // Retrieves the post ids with optimized assets registered in the DB.
+      $posts = Optimus_Management::bulk_optimized_assets();
+
+      foreach ($posts as $key => $post) {
+        $assets = Optimus_Request::get_files_paths($post['ID']);
+        foreach($assets as $asset_path) {
+          if (stream_resolve_include_path($asset_path) === FALSE) {
+            $metadata = wp_get_attachment_metadata($post['ID']);
+            // Unregister the optimus flags when the file is not longer there.
+            unset($metadata['optimus']);
+            update_post_meta($post['ID'], '_wp_attachment_metadata', $metadata);
+            // Registries works at post level.
+            break;
+          }
+        }
+      }
+    }
+
     private static function _optimize_image($img) {
         /* get metadata */
         $metadata = wp_get_attachment_metadata($img['ID']);
@@ -99,6 +129,11 @@ class Optimus_CLI extends WP_CLI_Command
                 ),
             ),
         ));
+
+        $cmd_webpsync = function() { self::webpSync(); };
+        WP_CLI::add_command( 'optimus webp sync', $cmd_webpsync, array(
+            'shortdesc' => 'Detects missing optimized assets.',
+        ));
     }
 }
 
diff --git a/inc/optimus_management.class.php b/inc/optimus_management.class.php
index d3ac8f5d0..19a2cccc5 100644
--- a/inc/optimus_management.class.php
+++ b/inc/optimus_management.class.php
@@ -61,15 +61,10 @@ class Optimus_Management
         );
     }
 
-
     /**
-    * Bulk optimizer collect assets
-    *
-    * @since   1.5.0
-    *
-    */
-
-    public static function bulk_optimizer_assets() {
+     * Prepares all variables to perform DB queries to retrieve optimus data.
+     */
+    private static function _get_optimus_query_variables() {
         global $wpdb;
 
         /* Get plugin options */
@@ -78,7 +73,7 @@ class Optimus_Management
         /* Supported image types */
         $imageTypes = ['jpeg', 'png'];
         foreach ($imageTypes as &$imageType) {
-           $imageType = "$wpdb->posts.post_mime_type = 'image/$imageType'"; 
+           $imageType = "$wpdb->posts.post_mime_type = 'image/$imageType'";
         }
         $queryImageTypes = "(". join(" OR ", $imageTypes) .")";
 
@@ -97,6 +92,20 @@ class Optimus_Management
             $id_query = "";
         }
 
+        return array($queryImageTypes, $optimus_query, $id_query);
+    }
+
+    /**
+    * Bulk optimizer collect assets
+    *
+    * @since   1.5.0
+    *
+    */
+    public static function bulk_optimizer_assets() {
+        global $wpdb;
+
+        list($queryImageTypes, $optimus_query, $id_query) = self::_get_optimus_query_variables();
+
         /* Image query */
         $query = "SELECT $wpdb->posts.ID, $wpdb->posts.post_title, $wpdb->posts.post_mime_type
             FROM $wpdb->posts, $wpdb->postmeta
@@ -112,6 +121,28 @@ class Optimus_Management
         return $wpdb->get_results($query, ARRAY_A);
     }
 
+    /**
+    * Gets all assets registered as already optimized.
+    */
+    public static function bulk_optimized_assets() {
+        global $wpdb;
+
+        list($queryImageTypes, $optimus_query, $id_query) = self::_get_optimus_query_variables();
+
+        /* Image query */
+        $query = "SELECT $wpdb->posts.ID, $wpdb->postmeta.meta_id
+            FROM $wpdb->posts, $wpdb->postmeta
+            WHERE $wpdb->posts.ID = $wpdb->postmeta.post_id
+                AND $wpdb->posts.post_type = 'attachment'
+                AND $wpdb->posts.post_mime_type LIKE 'image/%'
+                AND $queryImageTypes
+                AND $wpdb->postmeta.meta_key = '_wp_attachment_metadata'
+                AND $wpdb->postmeta.meta_value LIKE '$optimus_query'
+            ORDER BY $wpdb->posts.ID DESC";
+
+        return $wpdb->get_results($query, ARRAY_A);
+
+    }
 
     /**
     * Bulk optimizer page
diff --git a/inc/optimus_request.class.php b/inc/optimus_request.class.php
index 2ac5117ac..43b8e268b 100644
--- a/inc/optimus_request.class.php
+++ b/inc/optimus_request.class.php
@@ -170,72 +170,14 @@ class Optimus_Request
             return $upload_data;
         }
 
-        /* WP upload folder */
-        $upload_dir = wp_upload_dir();
-
-        /* Upload dir workaround */
-        if ( empty($upload_dir['subdir']) ) {
-            $upload_path = $upload_dir['path'];
-            $upload_url = $upload_dir['url'];
-            $upload_file = $upload_data['file'];
-        } else {
-            $file_info = pathinfo($upload_data['file']);
-            $upload_path = path_join($upload_dir['basedir'], $file_info['dirname']);
-            $upload_url = path_join($upload_dir['baseurl'], $file_info['dirname']);
-            $upload_file = $file_info['basename'];
-        }
-
-        /* Simple regex check */
-        if ( ! preg_match('/^[^\?\%]+\.(?:jpe?g|png)$/i', $upload_file) ) {
-            $upload_data['optimus']['error'] = __("Format not supported", "optimus");
-            return $upload_data;
-        }
-
-        /* Get the attachment */
-        $attachment = get_post($attachment_id);
-
-        /* Attachment mime type */
-        $mime_type = get_post_mime_type($attachment);
-
-        /* Mime type check */
-        if ( ! self::_allowed_mime_type($mime_type) ) {
-            $upload_data['optimus']['error'] = __("Mime type not supported", "optimus");
-            return $upload_data;
-        }
-
-        /* Init arrays */
-        $todo_files = array();
-        $diff_filesizes = array();
-
-        /* Keep the master */
-        if ( ! $options['keep_original'] ) {
-            array_push(
-                $todo_files,
-                $upload_file
-            );
-        }
-
         /* Set https scheme */
         if ( $options['secure_transport'] && Optimus_HQ::is_unlocked() ) {
             self::$_remote_scheme = 'https';
         }
 
-        /* Search for thumbs */
-        if ( ! empty($upload_data['sizes']) ) {
-            foreach( $upload_data['sizes'] as $thumb ) {
-                if ( $thumb['file'] && ( empty($thumb['mime-type']) || self::_allowed_mime_type($thumb['mime-type']) ) ) {
-                    array_push(
-                        $todo_files,
-                        $thumb['file']
-                    );
-                }
-            }
-
-            /* Reverse files array */
-            $todo_files = array_reverse(
-                array_unique($todo_files)
-            );
-        }
+        /* Get all images from the attachment */
+        $diff_filesizes = array();
+        $todo_files = self::_get_files($upload_data, $attachment_id);
 
         /* No images to process */
         if ( empty($todo_files) ) {
@@ -245,8 +187,8 @@ class Optimus_Request
         /* Loop todo files */
         foreach ($todo_files as $file) {
             /* Merge path & file */
-            $upload_url_file = path_join($upload_url, $file);
-            $upload_path_file = path_join($upload_path, $file);
+            $upload_url_file = $file['upload_url'];
+            $upload_path_file = $file['upload_path'];
 
             /* skip loop iteration if file doesn't exist */
             if ( ! file_exists($upload_path_file) ) {
@@ -368,6 +310,101 @@ class Optimus_Request
         return $upload_data;
     }
 
+    /**
+    * Gets all the files paths of the optimized images.
+    */
+    public static function get_files_paths($post_id) {
+       if ( empty( $metadata = wp_get_attachment_metadata( $post_id ) ) ) {
+         return array();
+       }
+       $files = self::_get_files($metadata, $post_id);
+       $post_files = array();
+
+       foreach( $files as $file ) {
+           $post_files[] = self::_get_webp_file_path($file['upload_path']);
+       }
+
+       return $post_files;
+    }
+
+    /**
+    * Gets files information from the upload data.
+    */
+    private static function _get_files(&$upload_data, $attachment_id) {
+        /* Get plugin options */
+        $options = Optimus::get_options();
+
+        /* WP upload folder */
+        $upload_dir = wp_upload_dir();
+
+        /* Upload dir workaround */
+        if ( empty($upload_dir['subdir']) ) {
+            $upload_path = $upload_dir['path'];
+            $upload_url = $upload_dir['url'];
+            $upload_file = $upload_data['file'];
+        } else {
+            $file_info = pathinfo($upload_data['file']);
+            $upload_path = path_join($upload_dir['basedir'], $file_info['dirname']);
+            $upload_url = path_join($upload_dir['baseurl'], $file_info['dirname']);
+            $upload_file = $file_info['basename'];
+        }
+
+        /* Simple regex check */
+        if ( ! preg_match('/^[^\?\%]+\.(?:jpe?g|png)$/i', $upload_file) ) {
+            $upload_data['optimus']['error'] = __("Format not supported", "optimus");
+            return FALSE;
+        }
+
+        /* Get the attachment */
+        $attachment = get_post($attachment_id);
+
+        /* Attachment mime type */
+        $mime_type = get_post_mime_type($attachment);
+
+        /* Mime type check */
+        if ( ! self::_allowed_mime_type($mime_type) ) {
+            $upload_data['optimus']['error'] = __("Mime type not supported", "optimus");
+            return FALSE;
+        }
+
+        /* Init arrays */
+        $todo_files = array();
+
+        /* Keep the master */
+        if ( ! $options['keep_original'] ) {
+            $upload_url_file = path_join($upload_url, $upload_file);
+            $upload_path_file = path_join($upload_path, $upload_file);
+            array_push(
+                $todo_files,
+                array(
+                  'upload_url' => $upload_url_file,
+                  'upload_path' => $upload_path_file,
+                )
+            );
+        }
+
+        /* Search for thumbs */
+        if ( ! empty($upload_data['sizes']) ) {
+            foreach( $upload_data['sizes'] as $thumb ) {
+                if ( $thumb['file'] && ( empty($thumb['mime-type']) || self::_allowed_mime_type($thumb['mime-type']) ) ) {
+                    $upload_url_file = path_join($upload_url, $thumb['file']);
+                    $upload_path_file = path_join($upload_path, $thumb['file']);
+                    array_push(
+                        $todo_files,
+                        array(
+                          'upload_url' => $upload_url_file,
+                          'upload_path' => $upload_path_file,
+                        )
+                    );
+                }
+            }
+
+            /* Reverse files array */
+            $todo_files = array_reverse($todo_files);
+        }
+
+        return $todo_files;
+    }
 
     /**
     * Handle image actions
@@ -421,18 +458,9 @@ class Optimus_Request
             return __("Mime type not supported", "optimus");
         }
 
-        $options = Optimus::get_options();
-
         /* Replace to or append webp extension */
         if ( isset($args['webp']) ) {
-            if ( $options['webp_keeporigext'] == 1 ) {
-                $file = $file . ".webp";
-            } else {
-                $file = self::_replace_file_extension(
-                    $file,
-                    'webp'
-                );
-            }
+            $file = self::_get_webp_file_path($file);
         }
 
         /* Rewrite image file */
@@ -520,6 +548,23 @@ class Optimus_Request
         );
     }
 
+    /**
+    * Gets the webp file path.
+    */
+    private static function _get_webp_file_path($file) {
+        $options = Optimus::get_options();
+        if ( $options['webp_keeporigext'] == 1 ) {
+            $file = $file . ".webp";
+        } else {
+            $file = self::_replace_file_extension(
+                $file,
+                'webp'
+            );
+        }
+
+        return $file;
+    }
+
 
     /**
     * Prüfung des erlaubten Bildtyps pro Datei
@@ -650,14 +695,7 @@ class Optimus_Request
         }
 
         /* Replace to or append webp extension */
-        if ( $options['webp_keeporigext'] == 1 ) {
-            $converted_file = $converted_file . ".webp";
-        } else {
-            $converted_file = self::_replace_file_extension(
-                $converted_file,
-                'webp'
-            );
-        }
+        $converted_file = self::_get_webp_file_path($converted_file);
 
         /* Remove if exists */
         if ( file_exists($converted_file) ) {
-- 
2.30.1

