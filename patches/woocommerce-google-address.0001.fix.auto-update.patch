From 73881485b76120499beb0d46a9df55b8d183043a Mon Sep 17 00:00:00 2001
From: Luca Pipolo <luca@netzstrategen.com>
Date: Tue, 18 Aug 2020 11:33:52 +0200
Subject: [PATCH] Fixed plugin woocommerce-google-address autoupdate function
 was not working.

---
 woocommerce-google-address.php |  24 +----
 wp_autoupdate.php              | 173 ---------------------------------
 2 files changed, 5 insertions(+), 192 deletions(-)
 delete mode 100644 wp-content/plugins/woocommerce-google-address/wp_autoupdate.php

diff --git a/woocommerce-google-address.php b/woocommerce-google-address.php
index 6927205eb..ae01315d9 100644
--- a/woocommerce-google-address.php
+++ b/woocommerce-google-address.php
@@ -18,31 +18,17 @@ require_once('class.front.php');
 // Loader
 function WooCommerce_Google_Address_Loader()
 {
-	if(class_exists('Woocommerce')) {		
+	if(class_exists('Woocommerce')) {
 		load_plugin_textdomain('woogoogad', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/');
 
 		if(get_option('mbc_woogoogad_api_key')!='')
 			$GLOBALS['WooCommerce_Google_Address_Plugin_Front'] = new WooCommerce_Google_Address_Plugin_Front();
 	}
-	
+
 } //WooCommerce_Google_Address_Loader
 
 add_action( 'plugins_loaded' , 'WooCommerce_Google_Address_Loader');
 
-// Auto updatder
-add_action( 'admin_init', 'mbc_woogoogad_autoupdate' ); 
-function mbc_woogoogad_autoupdate()
-{
-	if(!class_exists('WPMBC_AutoUpdate'))
-		require_once ( dirname(__FILE__).'/wp_autoupdate.php' );
-
-	$plugin_data = get_plugin_data( __FILE__ );
-	$plugin_current_version = $plugin_data['Version'];
-	$plugin_remote_path = 'http://www.mbcreation.com/plugin/woocommerce-google-address/';	
-	$plugin_slug = plugin_basename( __FILE__ );
-	new WPMBC_AutoUpdate ( $plugin_current_version, $plugin_remote_path, $plugin_slug );	
-}
-
 
 // Api key required
 
@@ -53,14 +39,14 @@ function mbc_woogoogad_shop_option($settings){
 
 
 	$settings[] = array( 'name' => 'Google Address Autocomplete', 'type' => 'title', 'desc' => '', 'id' => 'mbc_woogoogad_shop_option_settings' );
-					
+
 	$settings[] = array(
 		'title'   => __( 'Google Address Autocomplete API key', 'woogoogad' ),
 		'desc'    => __( 'API key (https://developers.google.com/maps/documentation/javascript/get-api-key#key)', 'woogoogad' ),
 		'id'      => 'mbc_woogoogad_api_key',
 		'default' => '',
 		'type'    => 'text',
-		
+
 	);
 
 	$settings[] = array( 'type' => 'sectionend', 'id' => 'mbc_woogoogad_shop_option_settings');
@@ -83,4 +69,4 @@ function mbc_woogoogad_load_api_key($param){
 
 	return $param;
 
-}
\ No newline at end of file
+}
diff --git a/wp_autoupdate.php b/wp_autoupdate.php
deleted file mode 100644
index 33d425ca7..000000000
--- a/wp_autoupdate.php
+++ /dev/null
@@ -1,173 +0,0 @@
-<?php
-
-class WPMBC_AutoUpdate 
-{
-	/**
-	 * The plugin current version
-	 * @var string
-	 */
-	private $current_version;
-
-	/**
-	 * The plugin remote update path
-	 * @var string
-	 */
-	private $update_path;
-
-	/**
-	 * Plugin Slug (plugin_directory/plugin_file.php)
-	 * @var string
-	 */
-	private $plugin_slug;
-
-	/**
-	 * Plugin name (plugin_file)
-	 * @var string
-	 */
-	private $slug;
-
-	/**
-	 * License User
-	 * @var string
-	 */
-	private $license_user;
-
-	/**
-	 * License Key 
-	 * @var string
-	 */
-	private $license_key;
-
-	/**
-	 * Initialize a new instance of the WordPress Auto-Update class
-	 * @param string $current_version
-	 * @param string $update_path
-	 * @param string $plugin_slug
-	 */
-	public function __construct( $current_version, $update_path, $plugin_slug, $license_user = '', $license_key = '' )
-	{
-		// Set the class public variables
-		$this->current_version = $current_version;
-		$this->update_path = $update_path;
-
-		// Set the License
-		$this->license_user = $license_user;
-		$this->license_key = $license_key;
-
-		// Set the Plugin Slug	
-		$this->plugin_slug = $plugin_slug;
-		list ($t1, $t2) = explode( '/', $plugin_slug );
-		$this->slug = str_replace( '.php', '', $t2 );		
-
-		// define the alternative API for updating checking
-		add_filter( 'pre_set_site_transient_update_plugins', array( &$this, 'check_update' ) );
-
-		// Define the alternative response for information checking
-		add_filter( 'plugins_api', array( &$this, 'check_info' ), 10, 3 );
-	}
-
-	/**
-	 * Add our self-hosted autoupdate plugin to the filter transient
-	 *
-	 * @param $transient
-	 * @return object $ transient
-	 */
-	public function check_update( $transient )
-	{
-		if ( empty( $transient->checked ) ) {
-			return $transient;
-		}
-
-		// Get the remote version
-		$remote_version = $this->getRemote_version();
-
-		// If a newer version is available, add the update
-		if ( version_compare( $this->current_version, $remote_version->new_version, '<' ) ) {
-			$obj = new stdClass();
-			$obj->slug = $this->slug;
-			$obj->new_version = $remote_version->new_version;
-			$obj->url = $remote_version->url;
-			$obj->plugin = $this->plugin_slug;
-			$obj->package = $remote_version->package;
-			$transient->response[$this->plugin_slug] = $obj;
-		}
-		return $transient;
-	}
-
-	/**
-	 * Add our self-hosted description to the filter
-	 *
-	 * @param boolean $false
-	 * @param array $action
-	 * @param object $arg
-	 * @return bool|object
-	 */
-	public function check_info($false, $action, $arg)
-	{
-		if (isset($arg->slug) && $arg->slug === $this->slug) {
-			$information = $this->getRemote_information();
-			return $information;
-		}
-		return $false;
-	}
-
-	/**
-	 * Return the remote version
-	 * @return string $remote_version
-	 */
-	public function getRemote_version()
-	{
-		$params = array(
-			'body' => array(
-				'action' => 'version',
-				'license_user' => $this->license_user,
-				'license_key' => $this->license_key,
-			),
-		);
-		$request = wp_remote_post ($this->update_path, $params );
-		if ( !is_wp_error( $request ) || wp_remote_retrieve_response_code( $request ) === 200 ) {
-			return unserialize( $request['body'] );
-		}
-		return false;
-	}
-
-	/**
-	 * Get information about the remote version
-	 * @return bool|object
-	 */
-	public function getRemote_information()
-	{
-		$params = array(
-			'body' => array(
-				'action' => 'info',
-				'license_user' => $this->license_user,
-				'license_key' => $this->license_key,
-			),
-		);
-		$request = wp_remote_post( $this->update_path, $params );
-		if (!is_wp_error( $request ) || wp_remote_retrieve_response_code( $request ) === 200 ) {
-			return unserialize( $request['body'] );
-		}
-		return false;
-	}
-
-	/**
-	 * Return the status of the plugin licensing
-	 * @return boolean $remote_license
-	 */
-	public function getRemote_license()
-	{
-		$params = array(
-			'body' => array(
-				'action' => 'license',
-				'license_user' => $this->license_user,
-				'license_key' => $this->license_key,
-			),
-		);
-		$request = wp_remote_post( $this->update_path, $params );
-		if ( !is_wp_error( $request ) || wp_remote_retrieve_response_code( $request ) === 200 ) {
-			return unserialize( $request['body'] );
-		}
-		return false;
-	}
-}
-- 
2.30.1

